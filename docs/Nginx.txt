yum install -y gcc gcc-c++
wget https://www.openssl.org/source/openssl-1.0.2l.tar.gz
wget https://ftp.pcre.org/pub/pcre/pcre-8.41.tar.gz
wget http://zlib.net/zlib-1.2.11.tar.gz

groupadd nginx
useradd  -s /sbin/nologin -M -g nginx nginx

./configure \
  --prefix=/usr/local/nginx-1.12.2 \
  --user=nginx \
  --group=nginx \
  --with-http_ssl_module \
  --with-http_realip_module \
  --with-http_addition_module \
  --with-poll_module \
  --with-http_sub_module \
  --with-http_dav_module \
  --with-http_flv_module \
  --with-http_mp4_module \
  --with-http_gunzip_module \
  --with-http_gzip_static_module \
  --with-http_random_index_module \
  --with-http_secure_link_module \
  --with-http_stub_status_module \
  --with-http_auth_request_module \
  --with-http_v2_module \
  --with-mail \
  --with-mail_ssl_module \
  --with-file-aio \
  --with-threads \
  --with-stream \
  --with-stream_ssl_module \
  --with-openssl=../openssl-1.0.2l \
  --with-pcre=../pcre-8.41 \
  --with-zlib=../zlib-1.2.11 \



--prefix=path
--sbin-path=path
--conf-path=path
--pid-path=path
--error-log-path=path
--http-log-path=path
--build=name
--user=name
--group=name
--with-select_module
--without-select_module
--with-poll_module
--without-poll_module
--without-http_gzip_module
--without-http_rewrite_module
--without-http_proxy_module
--with-http_ssl_module
--with-pcre=path
--with-pcre-jit
--with-zlib=path
--with-cc-opt=parameters
--with-ld-opt=parameters




$ vim /etc/init.d/nginx

########################################################################################################################
#!/bin/sh
#
# nginx - this script starts and stops the nginx daemon
# http://wiki.nginx.org/RedHatNginxInitScript
#
# chkconfig:   - 85 15
# description:  NGINX is an HTTP(S) server, HTTP(S) reverse \
#               proxy and IMAP/POP3 proxy server
# processname: nginx
# config:      /etc/nginx/nginx.conf
# config:      /etc/sysconfig/nginx
# pidfile:     /var/run/nginx.pid

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Check that networking is up.
[ "$NETWORKING" = "no" ] && exit 0

nginx="/usr/local/nginx-1.12.2/sbin/nginx"
prog=$(basename $nginx)

NGINX_CONF_FILE="/usr/local/nginx-1.12.2/conf/nginx.conf"

[ -f /etc/sysconfig/nginx ] && . /etc/sysconfig/nginx

lockfile=/var/lock/subsys/nginx

make_dirs() {
   # make required directories
   user=`$nginx -V 2>&1 | grep "configure arguments:.*--user=" | sed 's/[^*]*--user=\([^ ]*\).*/\1/g' -`
   if [ -n "$user" ]; then
      if [ -z "`grep $user /etc/passwd`" ]; then
         useradd -M -s /bin/nologin $user
      fi
      options=`$nginx -V 2>&1 | grep 'configure arguments:'`
      for opt in $options; do
          if [ `echo $opt | grep '.*-temp-path'` ]; then
              value=`echo $opt | cut -d "=" -f 2`
              if [ ! -d "$value" ]; then
                  # echo "creating" $value
                  mkdir -p $value && chown -R $user $value
              fi
          fi
       done
    fi
}

start() {
    [ -x $nginx ] || exit 5
    [ -f $NGINX_CONF_FILE ] || exit 6
    make_dirs
    echo -n $"Starting $prog: "
    daemon $nginx -c $NGINX_CONF_FILE
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    killproc $prog -QUIT
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    configtest || return $?
    stop
    sleep 1
    start
}

reload() {
    configtest || return $?
    echo -n $"Reloading $prog: "
    killproc $nginx -HUP
    RETVAL=$?
    echo
}

force_reload() {
    restart
}

configtest() {
  $nginx -t -c $NGINX_CONF_FILE
}

rh_status() {
    status $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart|configtest)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
            ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}"
        exit 2
esac
########################################################################################################################

$ chmod a+x /etc/init.d/nginx
$ chkconfig --list nginx
$ chkconfig --add nginx

$ /etc/init.d/nginx start
$ /etc/init.d/nginx stop

$ chkconfig --add /etc/init.d/nginx
$ service nginx start
$ service nginx stop
$ chkconfig nginx on

$ systemctl stop mysql
$ systemctl start mysql



------------------------------------------------------------------------------------------------------------------------
set password=password('123456');
grant all privileges on *.* to root@'%' identified by '123456';
flush privileges;


编译安装php7
yum install libxml2-devel curl-devel openjpeg openjpeg-devel openjpeg-libs libjpeg libpng freetype libjpeg libpng-devel freetype-devel  mcrypt php-mcrypt libmcrypt libmcrypt-devel

1.创建php用户和用户组:
groupadd -r php && useradd -r -g php -s /bin/flase -M /usr/local/php7

2.编译安装（以php-fpm 方式安装）：
./configure --prefix=/usr/local/php7 --exec-prefix=/usr/local/php7 --bindir=/usr/local/php7/bin --sbindir=/usr/local/php7/sbin --includedir=/usr/local/php7/include --libdir=/usr/local/php7/lib/php --mandir=/usr/local/php7/php/man --with-config-file-path=/usr/local/php7/etc --with-mysql-sock=/var/run/mysql/mysql.sock  --with-mcrypt=/usr/include --with-mhash --with-openssl --with-zlib --enable-zip --enable-mysqlnd --with-mysqli=shared,mysqlnd --with-pdo-mysql=shared,mysqlnd --with-gd --with-iconv --with-zlib --enable-zip --enable-inline-optimization --disable-debug --disable-rpath --enable-shared --enable-xml --enable-bcmath --enable-shmop --enable-sysvsem --enable-mbregex --enable-mbstring --enable-ftp --enable-gd-native-ttf --enable-pcntl --enable-sockets --with-xmlrpc --enable-soap --without-pear --with-gettext --enable-session --with-curl --with-jpeg-dir --with-freetype-dir --enable-opcache --enable-fpm  --with-fpm-user=apache --with-fpm-group=apache --without-gdbm --disable-fileinfo --with-bz2 --enable-maintainer-zts

3.配置文件的服务控制脚本
配置文件：
cp /php.7/php.ini-production  /usr/local/php7/etc/php.ini
cp /usr/local/php7/etc/php-fpm.conf.default  /usr/local/php7/etc/php-fpm.conf

服务控制脚本：
cp /php.7/sapi/fpm/init.d.php-fpm  /etc/rc.d/init.d/php-fpm && chown +x php-fpm

4.设置php日志文件目录和运行ID文件目录,修改session目录配置
mkdir -p /var/log/php-fpm/ && mkdir -p /var/run/php-fpm && cd /var/run/ && chown -R apache:apache php-fpm
mkdir -p /var/lib/php/session
chown -R apache:apache /var/lib/php

 5.加入环境变量
vim /etc/profile.d/php7.sh
export PATH=/usr/local/php7/bin:/usr/local/php7/sbin:$PATH

------------------------------------------------------------------------------------------------------------------------
#!/bin/bash
# nginx Startup script for the Nginx HTTP Server
# it is v.0.0.2 version.
# chkconfig: - 85 15
# description: Nginx is a high-performance web and proxy server.
#              It has a lot of features, but it's not for everyone.
# processname: nginx
# pidfile: /var/run/nginx.pid
# config: /usr/local/nginx/conf/nginx.conf
nginxd=/usr/local/nginx/sbin/nginx
nginx_config=/usr/local/nginx/conf/nginx.conf
nginx_pid=/var/run/nginx.pid
RETVAL=0
prog="nginx"
# Source function library.
. /etc/rc.d/init.d/functions
# Source networking configuration.
. /etc/sysconfig/network
# Check that networking is up.
[ ${NETWORKING} = "no" ] && exit 0
[ -x $nginxd ] || exit 0
# Start nginx daemons functions.
start() {
if [ -e $nginx_pid ];then
   echo "nginx already running...."
   exit 1
fi
   echo -n $"Starting $prog: "
   daemon $nginxd -c ${nginx_config}
   RETVAL=$?
   echo
   [ $RETVAL = 0 ] && touch /var/lock/subsys/nginx
   return $RETVAL
}
# Stop nginx daemons functions.
stop() {
        echo -n $"Stopping $prog: "
        killproc $nginxd
        RETVAL=$?
        echo
        [ $RETVAL = 0 ] && rm -f /var/lock/subsys/nginx /var/run/nginx.pid
}
# reload nginx service functions.
reload() {
    echo -n $"Reloading $prog: "
    #kill -HUP `cat ${nginx_pid}`
    killproc $nginxd -HUP
    RETVAL=$?
    echo
}
# See how we were called.
case "$1" in
start)
        start
        ;;
stop)
        stop
        ;;
reload)
        reload
        ;;
restart)
        stop
        start
        ;;
status)
        status $prog
        RETVAL=$?
        ;;
*)
        echo $"Usage: $prog {start|stop|restart|reload|status|help}"
        exit 1
esac
exit $RETVAL


------------------------------------------------------------------------------------------------------------------------

#user  nobody;
worker_processes 2;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    # max value 16384
    worker_connections  1024;
    # accept multiple connections
    multi_accept on;
}

# settings that affect all server blocks
stream {

    upstream backend {
        hash $remote_addr consistent;
        server  REDIS_SERVER:6379 max_fails=3 fail_timeout=10s;
    }
    server {
        listen 6379;
        proxy_connect_timeout 20s;
        proxy_timeout 5m;
        proxy_pass backend;
    }
}

------------------------------------------------------------------------------------------------------------------------


#user  nobody;
worker_processes 2;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    # max value 16384
    worker_connections  1024;
    # accept multiple connections
    multi_accept on;
}

# settings that affect all server blocks
stream {

    #正式数据库
    server {
        listen 12306;
        proxy_connect_timeout 1s;
        proxy_timeout 1m;
        proxy_pass MYSQL.RDS:3306;
    }


    # 测试数据库
    server {
        listen 12307;
        proxy_connect_timeout 1s;
        proxy_timeout 1m;
        proxy_pass MYSQL.RDS:3306;
    }

    server {
        listen 1099;
        proxy_connect_timeout 10s;
        proxy_timeout 3m;
        proxy_pass HOST_IP:1099;
    }
}

------------------------------------------------------------------------------------------------------------------------
# 添加认证登录

location / {
    auth_basic "Restricted";
    auth_basic_user_file conf/htpasswd;
    autoindex on;
}

$ vim conf/htpasswd
# 用户名:密码
user1:password
# 用户名2:密码2:注释
user2:password:comment

密码必须使用函数 crypt(3) 加密

$ printf "user1:$(openssl passwd -crypt 123456)\n" >>conf/htpasswd
$ cat conf/htpasswd
user1:L4LHJ9VLY4C6w

$ /usr/local/nginx-1.5.2/sbin/nginx -s reload
------------------------------------------------------------------------------------------------------------------------
#user  nobody;
worker_processes 2;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    # max value 16384
    worker_connections  1024;
    # accept multiple connections
    multi_accept on;
}

# settings that affect all server blocks
http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;

    server {
        listen 80 default;
        return 500;
    }

    include  virtual_host/*.conf;
}
########################################################################################################################
$ cd virtual_host/
$ vim www.conf
########################################################################################################################
server {
    listen       80;
    server_name  yunjing.net www.yunjing.net;

    #charset koi8-r;

    #access_log  logs/host.access.log  main;

    location / {
        root   html/www;
        index  index.html index.htm index.php;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000

    location ~ \.php$ {
        root           html/www;
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_index  index.php;
    #   fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        include        fastcgi_params;
    }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#    listen       8000;
#    listen       somename:8080;
#    server_name  somename  alias  another.alias;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}


# HTTPS server
#
#server {
#    listen       443 ssl;
#    server_name  localhost;

#    ssl_certificate      cert.pem;
#    ssl_certificate_key  cert.key;

                                                                                                                                                                    71,0-1        60%

    #access_log  logs/host.access.log  main;

    location / {
        root   html/www;
        index  index.html index.htm index.php;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
server {
    listen       80;
    server_name  yunjing.net www.yunjing.net;

    #charset koi8-r;

    #access_log  logs/host.access.log  main;

    location / {
        root   html/www;
        index  index.html index.htm index.php;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000

    location ~ \.php$ {
        root           html/www;
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_index  index.php;
    #   fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        include        fastcgi_params;
    }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#    listen       8000;
#    listen       somename:8080;
#    server_name  somename  alias  another.alias;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}


# HTTPS server
#
#server {
#    listen       443 ssl;
#    server_name  localhost;

#    ssl_certificate      cert.pem;
#    ssl_certificate_key  cert.key;

#    ssl_session_cache    shared:SSL:1m;
#    ssl_session_timeout  5m;

#    ssl_ciphers  HIGH:!aNULL:!MD5;
#    ssl_prefer_server_ciphers  on;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}

########################################################################################################################
$ vim blog.conf
########################################################################################################################
server {
    listen       80;
    server_name  www.cloudkit.net;

    #charset koi8-r;

    #access_log  logs/host.access.log  main;

    location / {
        root   html/wordpress;
        index  index.html index.htm index.php;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000

    location ~ \.php$ {
        root           html/wordpress;
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_index  index.php;
    #   fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        include        fastcgi_params;
    }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#    listen       8000;
#    listen       somename:8080;
#    server_name  somename  alias  another.alias;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}


# HTTPS server
#
#server {
#    listen       443 ssl;
#    server_name  localhost;

#    ssl_certificate      cert.pem;
#    ssl_certificate_key  cert.key;

#    ssl_session_cache    shared:SSL:1m;
#    ssl_session_timeout  5m;

#    ssl_ciphers  HIGH:!aNULL:!MD5;
#    ssl_prefer_server_ciphers  on;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}
------------------------------------------------------------------------------------------------------------------------

# 运行用户
#user  nobody;
# 工作进程数量
worker_processes  1;

# 错误日志
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

# PID文件
#pid        logs/nginx.pid;

# 工作模式及连接数限制
events {
    #use  epoll;
    worker_connections  1024;
}


http {
    # mime类型
    include       mime.types;
    default_type  application/octet-stream;

    # 设定日志格式
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;

    #client_header_buffer_size 1k;
    #large_client_header_buffers 4 8k;

    # weight 指定权重
    # max_fails 允许请求失败最大的次数 默认为1 设置为0永久无效 当超过最大次数时，返回proxy_next_upstream模块定义的错误
    # fail_timeout max_fails 次失败后，暂停的时间 默认为10秒
    # backup 备机 其它所有的非backup server宕机或者忙的时候，请求备机
    # down 标识无效状态 表示当前的server不参与负载
    # max_conns 限制最大连接数量
    upstream backend {
        # 2/6
        server  10.0.0.1:8080  weight=2  max_fails=3  fail_timeout=15;
	    # 3/6
        server  10.0.0.1:8081  weight=3;
	    # 1/6
        server  10.0.0.1:8082  weight=1;
	    server  10.0.0.1:9999  backup;

	    #server  10.0.0.2.8080  down;
	    #server  10.0.0.3:8080  max_conns=1000;
	    #server  example.com;

	    #keepalive 32;
    }

    # ip_hash 请求按访问ip的hash结果分配，每个访客固定访问一个后端服务器
    #upstream backend {
    #    server 10.0.0.1:8080;
    #    server 10.0.0.1:8081;
    #    ip_hash;
    #}

    # fair url_hash

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        #location / {
        #    root   html;
        #    index  index.html index.htm;
        #}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        location / {
            proxy_pass http://backend;
            proxy_next_upstream  http_500  http_502  http_503  error  timeout  invalid_header;

            # include proxy.conf;
	        proxy_redirect  off;
            proxy_set_header  Host  $host;
            proxy_set_header  X-Real-IP $remote_addr;
            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
	        # 允许客户端请求的最大单文件字节数
	        client_max_body_size  10m;
	        # 缓冲区代理缓冲用户端请求的最大字节数
            client_body_buffer_size  128k;
	        # 代理连接超时
            proxy_connect_timeout  90;
	        # 代理发送超时
	        proxy_send_timeout  90;
	        # 代理接收超时
            proxy_read_timeout  90;
	        # 保存用户头信息的缓冲区大小
            proxy_buffer_size  4k;
	        # proxy_buffers缓冲区
            proxy_buffers  4 32k;
	        # 高负荷下缓冲大小（proxy_buffers*2）
            proxy_busy_buffers_size  64k;
	        # 设定缓存文件夹大小
            proxy_temp_file_write_size  64k;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
