yum install -y gcc gcc-c++
wget https://www.openssl.org/source/openssl-1.0.2l.tar.gz
wget https://ftp.pcre.org/pub/pcre/pcre-8.41.tar.gz
wget http://zlib.net/zlib-1.2.11.tar.gz

groupadd nginx
useradd  -s /sbin/nologin -M -g nginx nginx

./configure \
  --prefix=/usr/local/nginx-1.12.2 \
  --user=nginx \
  --group=nginx \
  --with-http_ssl_module \
  --with-http_realip_module \
  --with-http_addition_module \
  --with-poll_module \
  --with-http_sub_module \
  --with-http_dav_module \
  --with-http_flv_module \
  --with-http_mp4_module \
  --with-http_gunzip_module \
  --with-http_gzip_static_module \
  --with-http_random_index_module \
  --with-http_secure_link_module \
  --with-http_stub_status_module \
  --with-http_auth_request_module \
  --with-http_v2_module \
  --with-mail \
  --with-mail_ssl_module \
  --with-file-aio \
  --with-threads \
  --with-stream \
  --with-stream_ssl_module \
  --with-openssl=../openssl-1.0.2l \
  --with-pcre=../pcre-8.41 \
  --with-zlib=../zlib-1.2.11 \



--prefix=path
--sbin-path=path
--conf-path=path
--pid-path=path
--error-log-path=path
--http-log-path=path
--build=name
--user=name
--group=name
--with-select_module
--without-select_module
--with-poll_module
--without-poll_module
--without-http_gzip_module
--without-http_rewrite_module
--without-http_proxy_module
--with-http_ssl_module
--with-pcre=path
--with-pcre-jit
--with-zlib=path
--with-cc-opt=parameters
--with-ld-opt=parameters




$ vim /etc/init.d/nginx

########################################################################################################################
#!/bin/sh
#
# nginx - this script starts and stops the nginx daemon
# http://wiki.nginx.org/RedHatNginxInitScript
#
# chkconfig:   - 85 15
# description:  NGINX is an HTTP(S) server, HTTP(S) reverse \
#               proxy and IMAP/POP3 proxy server
# processname: nginx
# config:      /etc/nginx/nginx.conf
# config:      /etc/sysconfig/nginx
# pidfile:     /var/run/nginx.pid

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Check that networking is up.
[ "$NETWORKING" = "no" ] && exit 0

nginx="/usr/local/nginx-1.12.2/sbin/nginx"
prog=$(basename $nginx)

NGINX_CONF_FILE="/usr/local/nginx-1.12.2/conf/nginx.conf"

[ -f /etc/sysconfig/nginx ] && . /etc/sysconfig/nginx

lockfile=/var/lock/subsys/nginx

make_dirs() {
   # make required directories
   user=`$nginx -V 2>&1 | grep "configure arguments:.*--user=" | sed 's/[^*]*--user=\([^ ]*\).*/\1/g' -`
   if [ -n "$user" ]; then
      if [ -z "`grep $user /etc/passwd`" ]; then
         useradd -M -s /bin/nologin $user
      fi
      options=`$nginx -V 2>&1 | grep 'configure arguments:'`
      for opt in $options; do
          if [ `echo $opt | grep '.*-temp-path'` ]; then
              value=`echo $opt | cut -d "=" -f 2`
              if [ ! -d "$value" ]; then
                  # echo "creating" $value
                  mkdir -p $value && chown -R $user $value
              fi
          fi
       done
    fi
}

start() {
    [ -x $nginx ] || exit 5
    [ -f $NGINX_CONF_FILE ] || exit 6
    make_dirs
    echo -n $"Starting $prog: "
    daemon $nginx -c $NGINX_CONF_FILE
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    killproc $prog -QUIT
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    configtest || return $?
    stop
    sleep 1
    start
}

reload() {
    configtest || return $?
    echo -n $"Reloading $prog: "
    killproc $nginx -HUP
    RETVAL=$?
    echo
}

force_reload() {
    restart
}

configtest() {
  $nginx -t -c $NGINX_CONF_FILE
}

rh_status() {
    status $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart|configtest)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
            ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}"
        exit 2
esac
########################################################################################################################

$ chmod a+x /etc/init.d/nginx
$ chkconfig --list nginx
$ chkconfig --add nginx

$ /etc/init.d/nginx start
$ /etc/init.d/nginx stop

$ chkconfig --add /etc/init.d/nginx
$ service nginx start
$ service nginx stop
$ chkconfig nginx on

$ systemctl stop mysql
$ systemctl start mysql



------------------------------------------------------------------------------------------------------------------------
set password=password('123456');
grant all privileges on *.* to root@'%' identified by '123456';
flush privileges;


编译安装php7
yum install libxml2-devel curl-devel openjpeg openjpeg-devel openjpeg-libs libjpeg libpng freetype libjpeg libpng-devel freetype-devel  mcrypt php-mcrypt libmcrypt libmcrypt-devel

1.创建php用户和用户组:
groupadd -r php && useradd -r -g php -s /bin/flase -M /usr/local/php7

2.编译安装（以php-fpm 方式安装）：
./configure --prefix=/usr/local/php7 --exec-prefix=/usr/local/php7 --bindir=/usr/local/php7/bin --sbindir=/usr/local/php7/sbin --includedir=/usr/local/php7/include --libdir=/usr/local/php7/lib/php --mandir=/usr/local/php7/php/man --with-config-file-path=/usr/local/php7/etc --with-mysql-sock=/var/run/mysql/mysql.sock  --with-mcrypt=/usr/include --with-mhash --with-openssl --with-zlib --enable-zip --enable-mysqlnd --with-mysqli=shared,mysqlnd --with-pdo-mysql=shared,mysqlnd --with-gd --with-iconv --with-zlib --enable-zip --enable-inline-optimization --disable-debug --disable-rpath --enable-shared --enable-xml --enable-bcmath --enable-shmop --enable-sysvsem --enable-mbregex --enable-mbstring --enable-ftp --enable-gd-native-ttf --enable-pcntl --enable-sockets --with-xmlrpc --enable-soap --without-pear --with-gettext --enable-session --with-curl --with-jpeg-dir --with-freetype-dir --enable-opcache --enable-fpm  --with-fpm-user=apache --with-fpm-group=apache --without-gdbm --disable-fileinfo --with-bz2 --enable-maintainer-zts

3.配置文件的服务控制脚本
配置文件：
cp /php.7/php.ini-production  /usr/local/php7/etc/php.ini
cp /usr/local/php7/etc/php-fpm.conf.default  /usr/local/php7/etc/php-fpm.conf

服务控制脚本：
cp /php.7/sapi/fpm/init.d.php-fpm  /etc/rc.d/init.d/php-fpm && chown +x php-fpm

4.设置php日志文件目录和运行ID文件目录,修改session目录配置
mkdir -p /var/log/php-fpm/ && mkdir -p /var/run/php-fpm && cd /var/run/ && chown -R apache:apache php-fpm
mkdir -p /var/lib/php/session
chown -R apache:apache /var/lib/php

 5.加入环境变量
vim /etc/profile.d/php7.sh
export PATH=/usr/local/php7/bin:/usr/local/php7/sbin:$PATH

------------------------------------------------------------------------------------------------------------------------
#!/bin/bash
# nginx Startup script for the Nginx HTTP Server
# it is v.0.0.2 version.
# chkconfig: - 85 15
# description: Nginx is a high-performance web and proxy server.
#              It has a lot of features, but it's not for everyone.
# processname: nginx
# pidfile: /var/run/nginx.pid
# config: /usr/local/nginx/conf/nginx.conf
nginxd=/usr/local/nginx/sbin/nginx
nginx_config=/usr/local/nginx/conf/nginx.conf
nginx_pid=/var/run/nginx.pid
RETVAL=0
prog="nginx"
# Source function library.
. /etc/rc.d/init.d/functions
# Source networking configuration.
. /etc/sysconfig/network
# Check that networking is up.
[ ${NETWORKING} = "no" ] && exit 0
[ -x $nginxd ] || exit 0
# Start nginx daemons functions.
start() {
if [ -e $nginx_pid ];then
   echo "nginx already running...."
   exit 1
fi
   echo -n $"Starting $prog: "
   daemon $nginxd -c ${nginx_config}
   RETVAL=$?
   echo
   [ $RETVAL = 0 ] && touch /var/lock/subsys/nginx
   return $RETVAL
}
# Stop nginx daemons functions.
stop() {
        echo -n $"Stopping $prog: "
        killproc $nginxd
        RETVAL=$?
        echo
        [ $RETVAL = 0 ] && rm -f /var/lock/subsys/nginx /var/run/nginx.pid
}
# reload nginx service functions.
reload() {
    echo -n $"Reloading $prog: "
    #kill -HUP `cat ${nginx_pid}`
    killproc $nginxd -HUP
    RETVAL=$?
    echo
}
# See how we were called.
case "$1" in
start)
        start
        ;;
stop)
        stop
        ;;
reload)
        reload
        ;;
restart)
        stop
        start
        ;;
status)
        status $prog
        RETVAL=$?
        ;;
*)
        echo $"Usage: $prog {start|stop|restart|reload|status|help}"
        exit 1
esac
exit $RETVAL


------------------------------------------------------------------------------------------------------------------------

#user  nobody;
worker_processes 2;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    # max value 16384
    worker_connections  1024;
    # accept multiple connections
    multi_accept on;
}

# settings that affect all server blocks
stream {

    upstream backend {
        hash $remote_addr consistent;
        server  REDIS_SERVER:6379 max_fails=3 fail_timeout=10s;
    }
    server {
        listen 6379;
        proxy_connect_timeout 20s;
        proxy_timeout 5m;
        proxy_pass backend;
    }
}

------------------------------------------------------------------------------------------------------------------------


#user  nobody;
worker_processes 2;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    # max value 16384
    worker_connections  1024;
    # accept multiple connections
    multi_accept on;
}

# settings that affect all server blocks
stream {

    #正式数据库
    server {
        listen 12306;
        proxy_connect_timeout 1s;
        proxy_timeout 1m;
        proxy_pass MYSQL.RDS:3306;
    }


    # 测试数据库
    server {
        listen 12307;
        proxy_connect_timeout 1s;
        proxy_timeout 1m;
        proxy_pass MYSQL.RDS:3306;
    }

    server {
        listen 1099;
        proxy_connect_timeout 10s;
        proxy_timeout 3m;
        proxy_pass HOST_IP:1099;
    }
}

------------------------------------------------------------------------------------------------------------------------
